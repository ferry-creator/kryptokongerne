[
    {
        "id": "fb94b5ca5ce751d5",
        "type": "tab",
        "label": "MCU",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a00d9ff1d49b324a",
        "type": "tab",
        "label": "node-red",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dc4958470e403265",
        "type": "tab",
        "label": "Response logs",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "615d7da335e1bd29",
        "type": "tab",
        "label": "UI tests",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d4ebc1375adc542",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#ae927a",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#ae927a",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#ae927a",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#cbb9aa",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#ae927a",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Sourdough Manager 2022",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 18,
                "gy": 18,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "9d49a9027f140f70",
        "type": "ui_tab",
        "name": "Sourdough Manager 2022",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "70e4408fb7a5530a",
        "type": "ui_group",
        "name": "Control",
        "tab": "9d49a9027f140f70",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42de78205b9c9f26",
        "type": "mqtt-broker",
        "name": "HiveMQ",
        "broker": "d442f1008e514e098cb3126d115cb356.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9c374d34624eca9c",
        "type": "mqtt-broker",
        "name": "CloudMQTT",
        "broker": "hairdresser.cloudmqtt.com",
        "port": "15687",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f7a6956cc03bf7dc",
        "type": "mqtt-broker",
        "name": "MaQiaTTo",
        "broker": "maqiatto.com",
        "port": "1883",
        "tls": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9cdb89835f4478cd",
        "type": "ui_group",
        "name": "System",
        "tab": "9d49a9027f140f70",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "ui-system"
    },
    {
        "id": "2d1a4ce25790118e",
        "type": "ui_spacer",
        "z": "fb94b5ca5ce751d5",
        "name": "spacer",
        "group": "70e4408fb7a5530a",
        "order": 2,
        "width": 1,
        "height": 1
    },
    {
        "id": "c8cc3c3ee71f5641",
        "type": "ui_group",
        "name": "Testing",
        "tab": "9d49a9027f140f70",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "ui-tests"
    },
    {
        "id": "31f04650df582e92",
        "type": "ui_group",
        "name": "Climate",
        "tab": "9d49a9027f140f70",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": "ui-climate"
    },
    {
        "id": "8e6c4df65096e965",
        "type": "mqtt out",
        "z": "fb94b5ca5ce751d5",
        "name": "JSON out",
        "topic": "s203773@student.dtu.dk/MCU",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "42de78205b9c9f26",
        "x": 1260,
        "y": 260,
        "wires": []
    },
    {
        "id": "228687a8a9d755b1",
        "type": "ui_button",
        "z": "fb94b5ca5ce751d5",
        "name": "",
        "group": "70e4408fb7a5530a",
        "order": 1,
        "width": "2",
        "height": "2",
        "passthru": false,
        "label": "{{msg.label}}",
        "tooltip": "Begin the incubation process",
        "color": "",
        "bgcolor": "",
        "className": "bigBtn",
        "icon": "{{msg.icon}}",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "bafe0708f4376ee4"
            ]
        ]
    },
    {
        "id": "bafe0708f4376ee4",
        "type": "finite-state-machine",
        "z": "fb94b5ca5ce751d5",
        "name": "",
        "fsmDefinition": "{\"state\":{\"status\":\"IDLE\"},\"transitions\":{\"IDLE\":{\"start\":{\"status\":\"STARTING\",\"data\":{\"climate\":null,\"initHeight\":null}}},\"STARTING\":{\"incubate\":\"INCUBATING\"},\"INCUBATING\":{\"stop\":{\"status\":\"IDLE\",\"data\":{\"climate\":0,\"initHeight\":null}},\"await\":\"AWAITING\",\"awaitMixing\":\"AWAITINGMIXER\"},\"AWAITING\":{\"stop\":{\"status\":\"IDLE\",\"data\":{\"climate\":0,\"initHeight\":null}}},\"AWAITINGMIXER\":{\"confirmMixer\":\"CONFIRMMIXER\"},\"CONFIRMMIXER\":{\"mix\":\"MIXING\",\"awaitMixing\":\"AWAITINGMIXER\"},\"MIXING\":{\"stop\":{\"status\":\"IDLE\",\"data\":{\"climate\":0,\"initHeight\":null}}}}}",
        "sendInitialState": true,
        "sendStateWithoutChange": false,
        "showTransitionErrors": false,
        "x": 440,
        "y": 260,
        "wires": [
            [
                "07a9f063f81029a9",
                "285089553ed934e0",
                "f8d0e68dfce860d4",
                "0b1ef48f40264bcf"
            ]
        ]
    },
    {
        "id": "408b2db416d24e84",
        "type": "ui_slider",
        "z": "fb94b5ca5ce751d5",
        "name": "Incubation Speed",
        "label": "Incubation Speed",
        "tooltip": "Should incubation be fast or slow?",
        "group": "70e4408fb7a5530a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-3",
        "max": "1",
        "step": 1,
        "className": "",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "63a50b07cfe79dfb"
            ]
        ]
    },
    {
        "id": "07a9f063f81029a9",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Sel data.climate",
        "func": "const prop = msg.payload.data.climate\nmsg.payload = prop\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 140,
        "wires": [
            [
                "408b2db416d24e84"
            ]
        ],
        "inputLabels": [
            "[current]"
        ]
    },
    {
        "id": "f8d0e68dfce860d4",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "btn controller",
        "func": "const state = msg.payload.status\n\nswitch(state) {\n    case \"IDLE\":\n        msg.label = \"Start\"\n        msg.topic = \"start\"\n        msg.icon  = \"fa-play\"\n        return msg\n    case \"STARTING\":\n        msg.label = \"... Starting\"\n        msg.topic = null\n        msg.icon  = null\n        return msg\n    case \"INCUBATING\":\n        msg.label = \"Stop\"\n        msg.topic = \"stop\"\n        msg.icon  = \"fa-stop\"\n        return msg\n    case \"AWAITING\":\n        msg.label = \"Finish\"\n        msg.topic = \"stop\"\n        msg.icon  = \"fa-stop\"\n        return msg\n    case \"AWAITINGMIXER\":\n        msg.label = \"Mix\"\n        msg.topic = \"confirmMixer\"\n        msg.icon  = \"fa-play\"\n        return msg\n    case \"MIXING\":\n        msg.label = \"... Mixing\"\n        msg.topic = null\n        msg.icon  = null\n        return msg\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 140,
        "wires": [
            [
                "228687a8a9d755b1"
            ]
        ]
    },
    {
        "id": "285089553ed934e0",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Sel status",
        "func": "const state = msg.payload.status\nmsg.payload = state\nglobal.set(\"state\", state)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 260,
        "wires": [
            [
                "b0e0f5549072bb7b",
                "d6333e7ed0cf2b02",
                "c642f5bd0ebd4cd5",
                "f10ff03337dd6c3b"
            ]
        ]
    },
    {
        "id": "b0e0f5549072bb7b",
        "type": "ui_text",
        "z": "fb94b5ca5ce751d5",
        "group": "9cdb89835f4478cd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "State:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "info-text, system-state-text",
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "89c8c7c453f515ef",
        "type": "json",
        "z": "fb94b5ca5ce751d5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1090,
        "y": 260,
        "wires": [
            [
                "8e6c4df65096e965",
                "f392049191ee7a5f"
            ]
        ]
    },
    {
        "id": "d6333e7ed0cf2b02",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Switch on State",
        "func": "const status = msg.payload\nmsg.payload = {status}\nswitch(status) {\n    case \"IDLE\":\n        global.set(\"initialHeight\") //remove\n        break\n    case \"STARTING\":\n        msg.payload = {\n            ...msg.payload,\n            \"type\": \"heightSensor\",\n            \"freq\": 1000,\n            \"reps\": 5\n        }\n        return msg\n    case \"MIXING\":\n        const water = {\n            ...msg.payload,\n            \"type\": \"water\",\n            \"freq\": 1000\n        }\n        const mix = {\n            ...msg.payload,\n            \"type\": \"mix\",\n            \"reps\": 10\n        }\n        return [[{payload: water}, {payload: mix}]]\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "89c8c7c453f515ef"
            ]
        ]
    },
    {
        "id": "63a50b07cfe79dfb",
        "type": "range",
        "z": "fb94b5ca5ce751d5",
        "minin": "-3",
        "maxin": "0",
        "minout": "255",
        "maxout": "0",
        "action": "scale",
        "round": true,
        "property": "payload",
        "name": "",
        "x": 840,
        "y": 140,
        "wires": [
            [
                "c36cd5a48a063b0b",
                "73cbd012543994d9"
            ]
        ]
    },
    {
        "id": "0df9330c4d91f7ad",
        "type": "link in",
        "z": "fb94b5ca5ce751d5",
        "name": "to FSM",
        "links": [
            "3220b7c04f7e1c4f",
            "a44c8c471d412813",
            "3f2d2519b1c7aeb2"
        ],
        "x": 225,
        "y": 320,
        "wires": [
            [
                "bafe0708f4376ee4"
            ]
        ]
    },
    {
        "id": "c36cd5a48a063b0b",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Set \"incubationSpeed\" [flow]",
        "func": "flow.set(\"incubationSpeed\", msg.payload)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "73cbd012543994d9",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Set Incubation Speed",
        "func": "const state = global.get(\"state\")\n/*if(state === \"INCUBATING\") {\n    msg.payload = {\n        state,\n        \"type\": \"climate\",\n        \"enable\": true,\n        \"incubationSpeed\": flow.get(\"incubationSpeed\")\n    }\n    return msg\n}*/\nmsg.payload = {\n    state,\n    \"type\": \"climate\",\n    \"enable\": true,\n    \"incubationSpeed\": flow.get(\"incubationSpeed\")\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 140,
        "wires": [
            [
                "89c8c7c453f515ef"
            ]
        ]
    },
    {
        "id": "c642f5bd0ebd4cd5",
        "type": "link out",
        "z": "fb94b5ca5ce751d5",
        "name": "State change",
        "mode": "link",
        "links": [
            "e403a6a211141d16",
            "9e4d5113bec38786",
            "3b4372046427c2ed"
        ],
        "x": 725,
        "y": 320,
        "wires": []
    },
    {
        "id": "f10ff03337dd6c3b",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Get height continously",
        "func": "const state = global.get(\"state\")\nif(state === \"INCUBATING\") {\n    msg.payload = {\n        \"status\": state,\n        \"type\": \"heightSensor\",\n        \"freq\": 500,\n        \"reps\": 5\n    }\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "89c8c7c453f515ef",
                "568ce529ad668298"
            ]
        ]
    },
    {
        "id": "f392049191ee7a5f",
        "type": "debug",
        "z": "fb94b5ca5ce751d5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 200,
        "wires": []
    },
    {
        "id": "568ce529ad668298",
        "type": "delay",
        "z": "fb94b5ca5ce751d5",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "f10ff03337dd6c3b"
            ]
        ]
    },
    {
        "id": "b13503fa4d29470b",
        "type": "link in",
        "z": "fb94b5ca5ce751d5",
        "name": "to MQTT",
        "links": [
            "df0a1944aef5cbbc",
            "288746aca4e591a7"
        ],
        "x": 885,
        "y": 220,
        "wires": [
            [
                "89c8c7c453f515ef"
            ]
        ]
    },
    {
        "id": "0582092818823cc1",
        "type": "ui_toast",
        "z": "fb94b5ca5ce751d5",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "Confirmation",
        "name": "Confirm mixing?",
        "x": 340,
        "y": 480,
        "wires": [
            [
                "1fc58cac893430af"
            ]
        ]
    },
    {
        "id": "0b1ef48f40264bcf",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Confirm mixing process?",
        "func": "const state = msg.payload.status\nif(state === \"CONFIRMMIXER\") {\n    msg.payload = \"Did you place the cup securely in the machine?\"\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 540,
        "wires": [
            [
                "0582092818823cc1"
            ]
        ]
    },
    {
        "id": "1fc58cac893430af",
        "type": "function",
        "z": "fb94b5ca5ce751d5",
        "name": "Confirm?",
        "func": "if(msg.payload === \"OK\") {\n    msg.topic = \"mix\"\n} else {\n    msg.topic = \"awaitMixing\"\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 380,
        "wires": [
            [
                "bafe0708f4376ee4"
            ]
        ]
    },
    {
        "id": "d83fd753f623ec1e",
        "type": "status",
        "z": "fb94b5ca5ce751d5",
        "name": "MQQT out",
        "scope": [
            "8e6c4df65096e965"
        ],
        "x": 940,
        "y": 560,
        "wires": [
            [
                "a25c280fdb361527"
            ]
        ]
    },
    {
        "id": "a25c280fdb361527",
        "type": "link out",
        "z": "fb94b5ca5ce751d5",
        "name": "MQTT status out",
        "mode": "link",
        "links": [
            "25a2e388b19a8113"
        ],
        "x": 1095,
        "y": 560,
        "wires": []
    },
    {
        "id": "a42acad459bc939c",
        "type": "ui_template",
        "z": "fb94b5ca5ce751d5",
        "group": "70e4408fb7a5530a",
        "name": "Styles",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style type=\"text/css\" media=\"all\">\n    .info-text {\n        opacity: 0.75 !important;\n    }\n    .system-state-text {\n        opacity: 0.5 !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "Styles",
        "x": 630,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "18f700adc5b1f454",
        "type": "mqtt in",
        "z": "a00d9ff1d49b324a",
        "name": "JSON in",
        "topic": "s203773@student.dtu.dk/node-red",
        "qos": "2",
        "datatype": "auto",
        "broker": "42de78205b9c9f26",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 200,
        "wires": [
            [
                "cd59e4d77b8bf366"
            ]
        ]
    },
    {
        "id": "cd59e4d77b8bf366",
        "type": "json",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "15413418d4091d69",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Set Initial Height",
        "func": "if(msg.payload.status === \"STARTING\") {\n    global.set(\"initialHeight\", msg.payload.mean)\n    msg.topic = \"incubate\"\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "3220b7c04f7e1c4f",
                "6dac218bbfa3b032"
            ]
        ]
    },
    {
        "id": "93f59d9c904345cd",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "MeanHeight",
        "func": "const sum = msg.payload.data.reduce((acc,cur) => {\n    return acc += cur\n},0)\nconst mean = sum / msg.payload.data.length\n//msg.payload.mean = parseInt(mean)\nmsg.payload.mean = parseFloat(mean).toFixed(2)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "06255601f619a7f8"
            ]
        ]
    },
    {
        "id": "a06f0a9f9b472bfc",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "heightSensor [STARTING]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"STARTING\",\"type\":\"heightSensor\",\"data\":[15,18,12,18,12]}",
        "payloadType": "json",
        "x": 290,
        "y": 300,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "477b95154ade860d",
        "type": "ui_text",
        "z": "a00d9ff1d49b324a",
        "group": "70e4408fb7a5530a",
        "order": 6,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Height:",
        "format": "{{msg.payload.mean}}",
        "layout": "row-left",
        "className": "info-text",
        "x": 920,
        "y": 520,
        "wires": []
    },
    {
        "id": "3220b7c04f7e1c4f",
        "type": "link out",
        "z": "a00d9ff1d49b324a",
        "name": "to FSM",
        "mode": "link",
        "links": [
            "0df9330c4d91f7ad"
        ],
        "x": 1205,
        "y": 460,
        "wires": []
    },
    {
        "id": "2d808d9b9db13925",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "heightSensor [INCUBATING - double height]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"INCUBATING\",\"type\":\"heightSensor\",\"data\":[10,10,10,10,10]}",
        "payloadType": "json",
        "x": 230,
        "y": 380,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "6dac218bbfa3b032",
        "type": "ui_text",
        "z": "a00d9ff1d49b324a",
        "group": "70e4408fb7a5530a",
        "order": 5,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Initial height:",
        "format": "{{msg.payload.mean}}",
        "layout": "row-left",
        "className": "info-text",
        "x": 1190,
        "y": 580,
        "wires": []
    },
    {
        "id": "9e4d5113bec38786",
        "type": "link in",
        "z": "a00d9ff1d49b324a",
        "name": "State change",
        "links": [
            "c642f5bd0ebd4cd5"
        ],
        "x": 615,
        "y": 580,
        "wires": [
            [
                "3381fcd1b836671f"
            ]
        ]
    },
    {
        "id": "3381fcd1b836671f",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Reset text",
        "func": "if(msg.payload === \"IDLE\") {\n    msg.payload = null\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 580,
        "wires": [
            [
                "477b95154ade860d",
                "6dac218bbfa3b032",
                "fa758a25cef4086c",
                "80d350c0cf7c6689",
                "01fe6e868276fb46"
            ]
        ]
    },
    {
        "id": "13b14380afa66727",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Check if height has doubled",
        "func": "if(msg.payload.status === \"INCUBATING\") {\n    const initialHeight = global.get(\"initialHeight\")\n    const currentHeight = msg.payload.mean\n    if( currentHeight >= initialHeight * 2) {\n        msg.peak = true\n        const baking = flow.get(\"baking\")\n        if(baking) {\n            msg.payload = \"Sourdough is ready!\"\n        } else {\n            msg.payload = \"Remove sourdough until 10g left, then press mix\"\n        }\n        return msg\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 400,
        "wires": [
            [
                "6be2b23545cc45f6",
                "76138530ea2bd048",
                "33a4df7145e44607"
            ]
        ]
    },
    {
        "id": "6be2b23545cc45f6",
        "type": "ui_toast",
        "z": "a00d9ff1d49b324a",
        "position": "dialog",
        "displayTime": "",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "Done",
        "name": "Sourdough ready",
        "x": 1510,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "f61c44109df7056f",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "heightSensor [INCUBATING]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"INCUBATING\",\"type\":\"heightSensor\",\"data\":[15,14,13,12,10]}",
        "payloadType": "json",
        "x": 280,
        "y": 340,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "33a4df7145e44607",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "go to AWAITING if peak",
        "func": "if(msg.peak === true) {\n    const baking = flow.get(\"baking\")\n    if(baking) {\n        msg.topic = \"await\"\n    } else {\n        msg.topic = \"awaitMixing\"\n    }\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 400,
        "wires": [
            [
                "a44c8c471d412813"
            ]
        ]
    },
    {
        "id": "a44c8c471d412813",
        "type": "link out",
        "z": "a00d9ff1d49b324a",
        "name": "to FSM",
        "mode": "link",
        "links": [
            "0df9330c4d91f7ad"
        ],
        "x": 1685,
        "y": 400,
        "wires": []
    },
    {
        "id": "9371853bdb3f3e5c",
        "type": "switch",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "flour",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "water",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mix",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "heightSensor",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "tempSensor",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "0615678f75f17b16",
                "ab89ce860ac9c35c"
            ],
            [
                "0615678f75f17b16"
            ],
            [
                "0615678f75f17b16"
            ],
            [
                "93f59d9c904345cd"
            ],
            [
                "5f4da1ac8c108168",
                "a9f90a1fb816ceb4"
            ]
        ]
    },
    {
        "id": "908b2c7b5d370f70",
        "type": "ui_switch",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "label": "Baking",
        "tooltip": "",
        "group": "70e4408fb7a5530a",
        "order": 3,
        "width": "2",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "9425d50e3d36405a"
            ]
        ]
    },
    {
        "id": "9425d50e3d36405a",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "set \"baking\" flow var",
        "func": "flow.set(\"baking\", msg.payload)",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst getValue = flow.get(\"baking\")\nif(!getValue) {\n    flow.set(\"baking\", true)\n}",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 80,
        "wires": []
    },
    {
        "id": "3b4372046427c2ed",
        "type": "link in",
        "z": "a00d9ff1d49b324a",
        "name": "State change",
        "links": [
            "c642f5bd0ebd4cd5"
        ],
        "x": 85,
        "y": 80,
        "wires": [
            [
                "a4d9c8ac6539685e"
            ]
        ]
    },
    {
        "id": "a4d9c8ac6539685e",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Reset sw",
        "func": "if(msg.payload === \"IDLE\") {\n    msg.payload = true\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "908b2c7b5d370f70"
            ]
        ]
    },
    {
        "id": "7b63ce8968e3a274",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "water [MIXING]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"MIXING\",\"type\":\"water\",\"response\":\"OK\"}",
        "payloadType": "json",
        "x": 320,
        "y": 420,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "bf2056fccb30ae88",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "flour [MIXING]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"MIXING\",\"type\":\"flour\",\"response\":\"OK\"}",
        "payloadType": "json",
        "x": 330,
        "y": 460,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "0615678f75f17b16",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Is OK?",
        "func": "const { response } = msg.payload\nif(response === \"OK\") {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 300,
        "wires": [
            [
                "41dce046f5b2115c",
                "2261ae9763229f01"
            ]
        ]
    },
    {
        "id": "df0a1944aef5cbbc",
        "type": "link out",
        "z": "a00d9ff1d49b324a",
        "name": "to MQTT",
        "mode": "link",
        "links": [
            "b13503fa4d29470b"
        ],
        "x": 1315,
        "y": 240,
        "wires": []
    },
    {
        "id": "41dce046f5b2115c",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Is water?",
        "func": "const { type } = msg.payload\nif(type === \"water\") {\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 240,
        "wires": [
            [
                "8b03a0f9cf5b887b"
            ]
        ]
    },
    {
        "id": "8b03a0f9cf5b887b",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "flour JSON",
        "func": "const status = msg.payload.status\nmsg.payload = {\n    status,\n    \"type\": \"flour\",\n    \"freq\": 1000,\n    \"reps\": 2\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 240,
        "wires": [
            [
                "df0a1944aef5cbbc"
            ]
        ]
    },
    {
        "id": "3f2d2519b1c7aeb2",
        "type": "link out",
        "z": "a00d9ff1d49b324a",
        "name": "to FSM",
        "mode": "link",
        "links": [
            "0df9330c4d91f7ad"
        ],
        "x": 1435,
        "y": 300,
        "wires": []
    },
    {
        "id": "cf8033cb5d04653d",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Send \"stop\" to FSM",
        "func": "msg.topic = \"stop\"\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "3f2d2519b1c7aeb2"
            ]
        ]
    },
    {
        "id": "2261ae9763229f01",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Is flour and mix?",
        "func": "const nodeContext = this.context\nconst { type } = msg.payload\nif(type === \"flour\") {\n    nodeContext.set(\"flour\", 1)\n}\nif(type === \"mix\") {\n    nodeContext.set(\"mix\", 1)\n}\n\nif(nodeContext.get(\"flour\") && nodeContext.get(\"mix\")) {\n    // clear context\n    nodeContext.set(\"flour\")\n    nodeContext.set(\"mix\")\n    // and return\n    return msg\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "cf8033cb5d04653d"
            ]
        ]
    },
    {
        "id": "4f809c32d63e5b21",
        "type": "status",
        "z": "a00d9ff1d49b324a",
        "name": "MQQT in",
        "scope": [
            "18f700adc5b1f454"
        ],
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "616403e23b79261d"
            ]
        ]
    },
    {
        "id": "057b8e446aae360f",
        "type": "ui_template",
        "z": "a00d9ff1d49b324a",
        "group": "70e4408fb7a5530a",
        "name": "Progress Bar",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div class=\"progressbar-wrapper\">\n    <div class=\"progressbar\">\n        <div class=\"progress\" style={{msg.rainbow}}>\n            <b><span class=\"progressbartext\">{{msg.percent}}%</span></b>\n        </div>\n    </div>\n</div>\n\n<style>\n    .progressbar-wrapper {\n        padding: 0 6px;\n    }\n    \n    @keyframes AnimationName {\n        0%{background-position:100% 50%}\n        100%{background-position:0% 50%}\n    }\n    \n    .progressbar {\n        background: #4c5055;\n        width: 100%;\n        height: 30px;\n        border-radius: 4px;\n    }\n    .progress {\n        max-width: 100%;\n        background: #ae9279;\n        height: 100%;\n        border-radius: inherit;\n        animation-name: MOVE-BG;\n        animation-duration: 100s;\n        animation-timing-function: linear;\n        animation-iteration-count: infinite;\n        display: flex;\n        align-items: center;\n        width: {{msg.percent}}%;\n    }\n    \n    .progressbartext {\n        margin-left: 10px;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1490,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "fa758a25cef4086c",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Get Percent",
        "func": "const initialHeight = global.get(\"initialHeight\")\nif(initialHeight) {\n    const currentHeight = msg.payload.mean\n    const ratio =  currentHeight / initialHeight\n    msg.percent = (ratio-1) * 100\n} else {\n    msg.percent = 0\n}\nmsg.percent = parseInt(msg.percent)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 520,
        "wires": [
            [
                "057b8e446aae360f"
            ]
        ]
    },
    {
        "id": "76138530ea2bd048",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Make Rainbow",
        "func": "if(msg.peak === true) {\n    const baking = flow.get(\"baking\")\n    const speed = 800//ms\n    if(baking) {\n//        msg.rainbow = \"background: linear-gradient(270deg, #ff0058, #ce63ff, #0011ff, #00dbff, #00ff7a, #94ff00, #ffe300);background-size: 1400% 1400%;-webkit-animation: AnimationName 500ms linear infinite;-moz-animation: AnimationName 500ms linear infinite;animation: AnimationName 500ms linear infinite;\"\n        msg.rainbow = `background: linear-gradient(270deg, #ae9279, #f7f1d8, #ae9279);background-size: 600% 600%;animation: AnimationName ${speed}ms ease infinite;`\n        return msg\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "057b8e446aae360f"
            ]
        ]
    },
    {
        "id": "6b04871219448d6c",
        "type": "ui_template",
        "z": "a00d9ff1d49b324a",
        "group": "70e4408fb7a5530a",
        "name": "Styles",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style type=\"text/css\" media=\"all\">\n    :root {\n        --nr-dashboard-pageBackgroundColor: transparent;\n    }\n    \n    html {\n        background: #615449;\n    }\n    \n    body.nr-dashboard-theme {\n        position: relative;\n        background: transparent;\n    }\n    \n    body.nr-dashboard-theme:before {\n        content: ' ';\n        display: block;\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        opacity: 0.2;\n        background-image: url(\"https://www.kingarthurbaking.com/sites/default/files/styles/featured_image/public/recipe_legacy/19928-3-large_0.jpg?itok=z6hrU9GQ\");\n        background-size: contain;\n        filter: blur(24px);\n    }\n\n    button {\n        left: auto;\n        border-radius: 6px !important;\n    }\n    \n    .bigBtn {\n        left: 12px !important;\n    }\n    \n    ui-card-panel {\n        border-radius: 8px !important;\n        border-color: transparent !important;\n    }\n    \n    md-toolbar {\n        background: transparent !important;\n        background-color: transparent !important;\n        opacity: 0.85;\n    }\n    \n    md-card {\n        background: transparent !important;\n    }\n    \n    md-dialog {\n        \n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "25a2e388b19a8113",
        "type": "link in",
        "z": "a00d9ff1d49b324a",
        "name": "MQTT status out (in)",
        "links": [
            "a25c280fdb361527"
        ],
        "x": 345,
        "y": 1080,
        "wires": [
            [
                "4c399c103d6bdbd5"
            ]
        ]
    },
    {
        "id": "f7ba386a4896cffa",
        "type": "ui_template",
        "z": "a00d9ff1d49b324a",
        "group": "9cdb89835f4478cd",
        "name": "MQTT status",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div class=\"mqtt-status\">\n    <div class=\"mqtt-status-header\">\n        <span class=\"mqtt-status-header-text\">\n            MQTT connection\n        </span>\n        <div class=\"fa fa-wifi\" />\n    </div>\n    <div class=\"mqtt-status-flex\">\n        <span class=\"mqtt-status-text\">\n            {{msg.payload.text}}\n        </span>\n        <span class=\"mqtt-status-graphic\"></span>\n    </div>\n</div>\n\n<style type=\"text/css\" media=\"all\">\n    .mqtt-status {\n        overflow: visible !important;\n        padding: 0px 6px;\n        height: 40px;\n    }\n    .mqtt-status-header-text {\n        opacity: 0.75;\n    }\n    .mqtt-status-graphic {\n        overflow: visible !important;\n        width:  16px;\n        height: 16px;\n        margin-left: 5px;\n        border-radius: 50%;\n        background: {{msg.payload.color}};\n    }\n    .mqtt-status-text {\n        font-style: bold;\n        font-weight: 900;\n    }\n    .mqtt-status-flex {\n        overflow: visible !important;\n        display: flex;\n        align-items: center;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "616403e23b79261d",
        "type": "change",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "in",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1160,
        "wires": [
            [
                "6fe11115cfc03869"
            ]
        ]
    },
    {
        "id": "4c399c103d6bdbd5",
        "type": "change",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "origin",
                "pt": "msg",
                "to": "out",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 1080,
        "wires": [
            [
                "6fe11115cfc03869"
            ]
        ]
    },
    {
        "id": "6fe11115cfc03869",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "set connection status",
        "func": "const { text } = msg.status\nconst prev = flow.get(\"connection\")\n\nswitch(msg.origin) {\n    case \"in\":\n        flow.set(\"connection\", {...prev, in: text})\n        break\n    case \"out\":\n        flow.set(\"connection\", {...prev, out: text})\n        break\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "a39bb4f66bb6cb3d"
            ]
        ]
    },
    {
        "id": "06255601f619a7f8",
        "type": "range",
        "z": "a00d9ff1d49b324a",
        "minin": "20",
        "maxin": "0",
        "minout": "0",
        "maxout": "20",
        "action": "scale",
        "round": false,
        "property": "payload.mean",
        "name": "",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "f9055fdb2fdfbb61"
            ]
        ]
    },
    {
        "id": "a39bb4f66bb6cb3d",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "Check connection OK?",
        "func": "const connection = flow.get(\"connection\")\nconst OK = \"node-red:common.status.connected\"\n\nmsg.payload = {...msg.payload }\n\nif(connection.in === OK && connection.out === OK) {\n    msg.payload.text = \"OK\"\n    msg.payload.color = \"#58f89a\"\n} else {\n    msg.payload.text = \"Lost ...\"\n    msg.payload.color = \"#ab475a\"\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1200,
        "wires": [
            [
                "f7ba386a4896cffa"
            ]
        ]
    },
    {
        "id": "517b10997c956b3d",
        "type": "inject",
        "z": "a00d9ff1d49b324a",
        "name": "mix [MIXING]",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"status\":\"MIXING\",\"type\":\"mix\",\"response\":\"OK\"}",
        "payloadType": "json",
        "x": 330,
        "y": 500,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "76311f5fdc43ad49",
        "type": "link in",
        "z": "a00d9ff1d49b324a",
        "name": "From UI tests",
        "links": [
            "19835f7290acd652"
        ],
        "x": 385,
        "y": 540,
        "wires": [
            [
                "9371853bdb3f3e5c"
            ]
        ]
    },
    {
        "id": "5f4da1ac8c108168",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "MeanTemp",
        "func": "const sum = msg.payload.celcius.reduce((acc,cur) => {\n    return acc += cur\n},0)\nconst mean = sum / msg.payload.celcius.length\nmsg.mean = parseFloat(mean).toFixed(2)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 680,
        "wires": [
            [
                "80d350c0cf7c6689"
            ]
        ]
    },
    {
        "id": "80d350c0cf7c6689",
        "type": "ui_text",
        "z": "a00d9ff1d49b324a",
        "group": "31f04650df582e92",
        "order": 6,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Temperature (C):",
        "format": "{{msg.mean}}",
        "layout": "row-left",
        "className": "info-text",
        "x": 1060,
        "y": 680,
        "wires": []
    },
    {
        "id": "a9f90a1fb816ceb4",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "MeanHumidity",
        "func": "const sum = msg.payload.humidity.reduce((acc,cur) => {\n    return acc += cur\n},0)\nconst mean = sum / msg.payload.humidity.length\nmsg.mean = parseFloat(mean).toFixed(2)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "01fe6e868276fb46"
            ]
        ]
    },
    {
        "id": "01fe6e868276fb46",
        "type": "ui_text",
        "z": "a00d9ff1d49b324a",
        "group": "31f04650df582e92",
        "order": 6,
        "width": "0",
        "height": "0",
        "name": "",
        "label": "Humidity:",
        "format": "{{msg.mean}}",
        "layout": "row-left",
        "className": "info-text",
        "x": 1040,
        "y": 720,
        "wires": []
    },
    {
        "id": "1fe82f3a323593c7",
        "type": "ui_button",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "group": "31f04650df582e92",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "Get",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "speculBtn",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 810,
        "y": 840,
        "wires": [
            [
                "1cfb75739e7bee35"
            ]
        ]
    },
    {
        "id": "401b28e5a7f2516e",
        "type": "ui_template",
        "z": "a00d9ff1d49b324a",
        "group": "70e4408fb7a5530a",
        "name": "UI climate Styles",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<style type=\"text/css\" media=\"all\">\n    .ui-climate button {\n        background: #4c5055 !important;\n        color: rgba(255, 255, 255, 0.5) !important;\n        font-weight: 900 !important;\n        left: 12px;\n        \n        position: absolute !important;\n        width: 48px !important;\n        height: 48px !important;\n        left: calc(100% - 60px) !important;\n    }\n    \n    .ui-climate .nr-dashboard-cardcontainer {\n        padding: 6px 0 !important;\n    }\n    \n    .ui-climate .nr-dashboard-cardtitle {\n        margin-bottom: 3px;\n    }\n    \n    .ui-climate .nr-dashboard-cardcontainer {\n        height: auto !important;\n    }\n    \n    .ui-climate md-card {\n        height: auto !important;\n        position: static !important;\n        padding-bottom: 8px !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 850,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "288746aca4e591a7",
        "type": "link out",
        "z": "a00d9ff1d49b324a",
        "name": "to MQTT",
        "mode": "link",
        "links": [
            "b13503fa4d29470b"
        ],
        "x": 1175,
        "y": 840,
        "wires": []
    },
    {
        "id": "1cfb75739e7bee35",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "temp JSON",
        "func": "const state = global.get(\"state\")\nmsg.payload = {\n    \"status\": state,\n    \"type\": \"tempSensor\",\n    \"freq\": 2500,\n    \"reps\": 1\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "288746aca4e591a7"
            ]
        ]
    },
    {
        "id": "ab89ce860ac9c35c",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "fake mix ! (hack)",
        "func": "msg.payload = {\n    \"status\": \"MIXING\",\n    \"type\": \"mix\",\n    \"response\": \"OK\"\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "c80ea2edadbd5b2a"
            ]
        ]
    },
    {
        "id": "c80ea2edadbd5b2a",
        "type": "delay",
        "z": "a00d9ff1d49b324a",
        "name": "",
        "pauseType": "delay",
        "timeout": "23",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 180,
        "wires": [
            [
                "2261ae9763229f01"
            ]
        ]
    },
    {
        "id": "f9055fdb2fdfbb61",
        "type": "function",
        "z": "a00d9ff1d49b324a",
        "name": "2decimal",
        "func": "msg.payload.mean = parseFloat(msg.payload.mean).toFixed(2)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "477b95154ade860d",
                "15413418d4091d69",
                "13b14380afa66727",
                "fa758a25cef4086c"
            ]
        ]
    },
    {
        "id": "43d1ea5c4baf62a9",
        "type": "mqtt in",
        "z": "dc4958470e403265",
        "name": "JSON in",
        "topic": "s203773@student.dtu.dk/node-red",
        "qos": "2",
        "datatype": "auto",
        "broker": "42de78205b9c9f26",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "549dcbe1bf48abe5"
            ]
        ]
    },
    {
        "id": "529b5b46e0310a42",
        "type": "debug",
        "z": "dc4958470e403265",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "549dcbe1bf48abe5",
        "type": "json",
        "z": "dc4958470e403265",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "529b5b46e0310a42"
            ]
        ]
    },
    {
        "id": "19835f7290acd652",
        "type": "link out",
        "z": "615d7da335e1bd29",
        "name": "From UI tests",
        "mode": "link",
        "links": [
            "76311f5fdc43ad49"
        ],
        "x": 855,
        "y": 340,
        "wires": []
    },
    {
        "id": "59a3af2e4b8104ec",
        "type": "ui_button",
        "z": "615d7da335e1bd29",
        "name": "",
        "group": "c8cc3c3ee71f5641",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "Init",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 300,
        "wires": [
            [
                "ea046ef4429fb34d"
            ]
        ]
    },
    {
        "id": "0141480248e8e796",
        "type": "ui_template",
        "z": "615d7da335e1bd29",
        "group": "70e4408fb7a5530a",
        "name": "UI tests Styles",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<style type=\"text/css\" media=\"all\">\n    .ui-tests button {\n        background: #4c5055 !important;\n        color: rgba(255, 255, 255, 0.5) !important;\n        font-weight: 900 !important;\n        left: 12px;\n    }\n    \n    .ui-tests .nr-dashboard-cardcontainer {\n        padding: 6px 0 !important;\n    }\n    \n    .ui-tests .nr-dashboard-cardtitle,\n    .ui-system .nr-dashboard-cardtitle {\n        margin-bottom: 3px;\n    }\n    \n    .ui-system .nr-dashboard-cardcontainer {\n        height: auto !important;\n    }\n    \n    .ui-system md-card {\n        height: auto !important;\n        position: static !important;\n        padding-bottom: 8px !important;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 400,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "10b8c214e063989d",
        "type": "ui_button",
        "z": "615d7da335e1bd29",
        "name": "",
        "group": "c8cc3c3ee71f5641",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "100%",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 340,
        "wires": [
            [
                "5e1df95503349063"
            ]
        ]
    },
    {
        "id": "48135eaf55721cb6",
        "type": "ui_button",
        "z": "615d7da335e1bd29",
        "name": "",
        "group": "c8cc3c3ee71f5641",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "mix",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "b3601430182894cb"
            ]
        ]
    },
    {
        "id": "ea046ef4429fb34d",
        "type": "change",
        "z": "615d7da335e1bd29",
        "name": "heightSensor [STARTING]",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"status\":\"STARTING\",\"type\":\"heightSensor\",\"data\":[15,18,12,18,12]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 300,
        "wires": [
            [
                "19835f7290acd652"
            ]
        ]
    },
    {
        "id": "5e1df95503349063",
        "type": "change",
        "z": "615d7da335e1bd29",
        "name": "heightSensor [2x height]",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"status\":\"INCUBATING\",\"type\":\"heightSensor\",\"data\":[10,10,10,10,10]}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "19835f7290acd652"
            ]
        ]
    },
    {
        "id": "b3601430182894cb",
        "type": "function",
        "z": "615d7da335e1bd29",
        "name": "water, flour, mix => OK",
        "func": "const water = {\n    \"status\": \"MIXING\",\n    \"type\": \"water\",\n    \"response\": \"OK\"\n}\nconst flour = {\n    \"status\": \"MIXING\",\n    \"type\": \"flour\",\n    \"response\": \"OK\"\n}\nconst mix = {\n    \"status\": \"MIXING\",\n    \"type\": \"mix\",\n    \"response\": \"OK\"\n}\nreturn [[{payload: water}, {payload: flour}, {payload: mix}]]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "19835f7290acd652"
            ]
        ]
    }
]